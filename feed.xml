<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Aniket Panse</title>
    <link href="http://aniketpanse.in/feed.xml" rel="self" />
    <link href="http://aniketpanse.in/" />
    <updated>2015-10-03T14:50:39+08:00</updated>
    <id>http://aniketpanse.in/</id>
    <entry>
        <title type="html"><![CDATA[Deploying to GitHub from Travis-CI]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2015/autodeploy-github-travis.html"/>
        <published>2015-07-23T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2015/autodeploy-github-travis.html</id>
        <category scheme="http://aniketpanse.in/tag/#travis-ci" term="travis-ci" label="travis-ci" />
        <category scheme="http://aniketpanse.in/tag/#autodeploy" term="autodeploy" label="autodeploy" />
        <category scheme="http://aniketpanse.in/tag/#static-website" term="static-website" label="static-website" />
        <category scheme="http://aniketpanse.in/tag/#github-pages" term="github-pages" label="github-pages" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>Small automations sometimes really help your workflow. That's the case with my blog too.
I use a static blog generator to generate my blog, and GitHub pages to host the generated
HTML. This is a problem, because I have to maintain two distinct repositories, one to
host my blog content, <a class="reference external" href="https://github.com/czardoz/aniketpanse-in">aniketpanse-in</a> and one to host the blog itself, <a class="reference external" href="https://github.com/czardoz/czardoz.github.io">czardoz.github.io</a>.
I have to make sure that both the repositories are always kept in sync.</p>
<p>I used <a class="reference external" href="http://travis-ci.org/">Travis-CI</a> to automate this job for me. Every time I make
changes to the <tt class="docutils literal">master</tt> branch of <a class="reference external" href="https://github.com/czardoz/aniketpanse-in">aniketpanse-in</a>, Travis builds the changes, and
pushes them to <a class="reference external" href="https://github.com/czardoz/czardoz.github.io">czardoz.github.io</a> for me.</p>
<p>Broadly, the whole process involves:</p>
<ol class="lowerroman simple">
<li>Creating an SSH Key, having a private and a public part</li>
<li>Associating the public Key with the GitHub repository you want to push to.
(called <cite>destinationRepo</cite> hereon)</li>
<li>Using Travis to encrypt the private Key, and adding it to the content repository (called <cite>sourceRepo</cite> hereon).
This is the repository from which content will be generated and pushed to the <cite>destinationRepo</cite>.</li>
<li>Updating the &quot;.travis.yml&quot; file in the <cite>sourceRepo</cite> to decrypt the private key, and use it to push updates to the
<cite>destinationRepo</cite> on GitHub.</li>
</ol>
<div class="section" id="create-an-ssh-key">
<h2>1. Create an SSH Key</h2>
<p>An SSH Key can be associated with a GitHub repository, and you can also allow write access
to the Key. It basically means that you can push changes to the repository using that key.</p>
<div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd </span>sourceRepo
<span class="nv">$ </span>ssh-keygen -C <span class="s2">&quot;hi@example.com&quot;</span> -t rsa -b 4096
Generating public/private rsa key pair.
</pre></div>
<p>You will be asked where you want the file to be saved,</p>
<div class="highlight"><pre>Enter file in which to save the key <span class="o">(</span>/home/czardoz/.ssh/id_rsa<span class="o">)</span>: ./demo-secret-key
</pre></div>
<p>and for a passphrase for your new Key. Do use a nice unguessable passphrase here <a class="reference external" href="http://superuser.com/questions/261361/do-i-need-to-have-a-passphrase-for-my-ssh-rsa-key">Why?</a>.</p>
<div class="highlight"><pre>Enter passphrase <span class="o">(</span>empty <span class="k">for</span> no passphrase<span class="o">)</span>:
Enter same passphrase again:
Your identification has been saved in ./demo-secret-key.
Your public key has been saved in ./demo-secret-key.pub.
The key fingerprint is:
f8:8e:5f:42:77:b5:77:ca:3f:25:6d:65:f3:e3:83:2a hi@example.com
The key<span class="err">&#39;</span>s randomart image is:
+--<span class="o">[</span> RSA 4096<span class="o">]</span>----+
<span class="p">|</span>                 <span class="p">|</span>
<span class="p">|</span>                 <span class="p">|</span>
<span class="p">|</span>              .  <span class="p">|</span>
<span class="p">|</span>       .     . oo<span class="p">|</span>
<span class="p">|</span>      . S . . .o*<span class="p">|</span>
<span class="p">|</span>       o . . ..+*<span class="p">|</span>
<span class="p">|</span>        o .   <span class="o">=</span>oo<span class="p">|</span>
<span class="p">|</span>       o E   . <span class="o">=</span> <span class="p">|</span>
<span class="p">|</span>      ..o ...   +<span class="p">|</span>
+-----------------+
</pre></div>
<p>If you list the files in the directory right now, you should see two new files created,</p>
<div class="highlight"><pre><span class="nv">$ </span>ls demo-secret-*
demo-secret-key  demo-secret-key.pub
</pre></div>
</div>
<div class="section" id="associate-public-key-with-your-destinationrepo">
<h2>2. Associate Public Key with your <cite>destinationRepo</cite></h2>
<p>On GitHub, go to the repository's settings for <cite>destinationRepo</cite>. You should see a &quot;Deploy Keys&quot; menu in the sidebar.
Click on &quot;Add deploy key&quot;</p>
<img alt="Adding a Deploy Key for a GitHub repository" class="align-center" src="/img/pic4.png" />
<p>GitHub will ask for a title (put in something sensible, like &quot;Travis Deploy Key&quot;. In the &quot;Key&quot; field,
paste the contents of the &quot;demo-secret-key.pub&quot; file. Check the box for &quot;Allow write access&quot;, since
this Key will be used to push content to the repository.</p>
</div>
<div class="section" id="use-the-travis-cli-to-encrypt-the-private-key">
<h2>3. Use the Travis CLI to encrypt the private key</h2>
<p>If you have not already installed it, go ahead and install the <a class="reference external" href="https://github.com/travis-ci/travis.rb">Travis CLI</a>.</p>
<div class="highlight"><pre><span class="nv">$ </span>gem install travis <span class="o">&amp;&amp;</span> travis login
</pre></div>
<p>After logging in to Travis, encrypt the private Key using the Travis CLI:</p>
<div class="highlight"><pre><span class="nv">$ </span>travis encrypt-file demo-secret-key
Detected repository as czardoz/autodeploy-demo-source, is this correct? <span class="se">\|</span>yes<span class="se">\|</span> yes
encrypting demo-secret-key <span class="k">for</span> czardoz/autodeploy-demo-source
storing result as demo-secret-key.enc
storing secure env variables <span class="k">for</span> decryption

Please add the following to your build script <span class="o">(</span>before_install stage in your .travis.yml, <span class="k">for</span> instance<span class="o">)</span>:

    openssl aes-256-cbc -K <span class="nv">$encrypted_a0bda5fb43d5_key</span> -iv <span class="nv">$encrypted_a0bda5fb43d5_iv</span> -in demo-secret-key.enc -out demo-secret-key -d

Pro Tip: You can add it automatically by running with --add.

Make sure to add demo-secret-key.enc to the git repository.
Make sure not to add demo-secret-key to the git repository.
Commit all changes to your .travis.yml.
</pre></div>
<p>Travis has now encrypted your private key, and created encrypted environment variables for you, that'll
allow you to decrypt your file at build time, on Travis-CI. Helpful as ever, it also told you what command you can use
to decrypt your file.</p>
<p>Now you just need to add the <em>encrypted</em> private key to your <cite>sourceRepo</cite>, and commit the change. Remove the public key.</p>
<div class="highlight"><pre><span class="nv">$ </span>git add ./demo-secret-key.enc
<span class="nv">$ </span>git commit -m <span class="s2">&quot;Adding the encrypted private key to the repository&quot;</span>
<span class="nv">$ </span>rm demo-secret-key demo-secret-key.enc
</pre></div>
</div>
<div class="section" id="update-travis-configuration-to-deploy-to-destinationrepo">
<h2>4. Update Travis Configuration to Deploy to <cite>destinationRepo</cite></h2>
<p>In short, Travis has to:</p>
<ol class="lowerroman simple">
<li>Decrypt the encrypted key file</li>
<li>Generate your static HTML</li>
<li>Push the updated content to GitHub using the private Key</li>
</ol>
<div class="highlight"><pre><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">python</span>
<span class="l-Scalar-Plain">python</span><span class="p-Indicator">:</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">2.7</span>
<span class="l-Scalar-Plain">before_install</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">openssl aes-256-cbc -K $encrypted_a0bda5fb43d5_key -iv $encrypted_a0bda5fb43d5_iv -in demo-secret-key.enc -out demo-secret-key -d</span>
<span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span>
  <span class="c1"># Extract the commit message</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">export TRAVIS_COMMIT_MSG=&quot;$(git log --format=%B --no-merges -n 1)&quot;</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mkdir deploy</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">git clone https://github.com/czardoz/destinationRepo.git deploy</span>
<span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">make docs ./deploy</span> <span class="c1"># Run the script that generates your HTML</span>
<span class="l-Scalar-Plain">after_success</span><span class="p-Indicator">:</span>
  <span class="c1"># Add the ssh key</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">eval &quot;$(ssh-agent)&quot;</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">chmod 600 ./deploy.secret.key</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ssh-add ./deploy.secret.key</span>

  <span class="c1"># Commit and push the updated content to &quot;destinationRepo&quot;</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cd deploy</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">git checkout -B master</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">git add -A</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">git commit --allow-empty -m &quot;$TRAVIS_COMMIT_MSG&quot;</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;Pushing changes&quot;</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">git push git@github.com:czardoz/destinationRepo.git master</span>
</pre></div>
<p>Notice that in the last <tt class="docutils literal">git push</tt> command, we've used <cite>git&#64;github.com</cite> instead of pushing of HTTPS.
This forces git to use the SSH Key that we have added.</p>
<p>That's all there is to it.</p>
</div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Wrapping up: Beeswarm]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/beeswarm-final.html"/>
        <published>2013-10-01T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/beeswarm-final.html</id>
        <category scheme="http://aniketpanse.in/tag/#beeswarm" term="beeswarm" label="beeswarm" />
        <category scheme="http://aniketpanse.in/tag/#gsoc" term="gsoc" label="gsoc" />
        <category scheme="http://aniketpanse.in/tag/#honeypots" term="honeypots" label="honeypots" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>So the coding period of GSoC 2013 is officially over, and I want to talk
about how far Beeswarm has come in the last five months. I think the best
way to explain my work is by introducing and explaining the Beeswarm terminology
first.</p>
<div class="section" id="what-exactly-is-beeswarm">
<h2>What exactly is Beeswarm?</h2>
<p>Simply put, Beeswarm is a special honeypot, with a system of automated
clients, which use that honeypot. Information about attackers is gathered by
analyzing the difference between the expected and actual traffic at the server
end of the honeypot.</p>
<p>In technical terms, Beeswarm is a <a class="reference external" href="http://en.wikipedia.org/wiki/Honeytoken">Honeytoken</a>
project, that aims to use client side traffic as the Honeytoken. It consists of
three major components:</p>
<ul>
<li><dl class="first docutils">
<dt>Hive</dt>
<dd><p class="first last">The Hive is the actual Honeypot server. It runs on gevent and supports multiple
protocols such as Telnet, SSH, SMTP, FTP, etc. It can also be used as a standalone
Honeypot in the traditional way (without the other two components).</p>
</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt>Feeder</dt>
<dd><p class="first last">Essentially, the Feeder is the client part of Beeswarm. The job of the Feeder is
to actively attract attackers to the Honeypot (Hive). It runs client sessions on
the remote Hive server. These clients are &quot;semi-intelligent&quot;. By &quot;semi-intelligent&quot;,
I mean that they have a rudimentary intelligence which allows them to login to the
different Hive servers, and perform legitimate actions on them. For example, the FTP
Feeder logs into the server (Hive), lists the files, and then either downloads or
deletes them.</p>
</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt>Beekeeper</dt>
<dd><p class="first last">The Beekeeper is the Web based management interface for Beeswarm. It analyzies and
classifies the client sessions that are made on the Hive. In fact, one of its most
important tasks is to correlate the data from Hive and Feeder, and determine if a
particular session was from a malicious attacker. Beekeeper allows easy deployment
of Hives and Feeders by providing customized bootable ISOs for them.</p>
</dd>
</dl>
</li>
</ul>
<p>A simple use case, where one could detect MITM attacks:</p>
<img alt="A simple use case for Beeswarm" class="align-center" src="/img/pic0.png" />
<p>Through the course of the last five months, a lot of progress has been made in the
following areas:</p>
<ol class="arabic simple">
<li>Interactivity of Hive capabilities</li>
<li>The Beekeeper web-interface</li>
<li>Intelligence of the automated Feeder clients</li>
<li>Deployment</li>
</ol>
<p>I'll give a brief update on each of these areas, focusing on the new things, and
places where creative ideas are used, which could also be beneficial outside of this
particular project.</p>
</div>
<div class="section" id="interactivity-of-hive-protocols">
<h2>Interactivity of Hive Protocols</h2>
<p>This is the part of the project that I enjoyed working on the most. As mentioned
in my previous posts, the Hive now has very interactive SSH and Telnet capabilities.
It also boasts a fully functional SMTP server, that can capture emails being sent.
The FTP capability too is largely functional, although it is probably not completely
standards-compliant. It does, however, play along nicely with most FTP clients.
The HTTP and HTTPs capabilities too, serve real pages from a directory. This means
that it is quite possible to emulate devices like routers, which usually have a very
simple web-ui.</p>
</div>
<div class="section" id="the-beekeeper-web-interface">
<h2>The Beekeeper Web Interface</h2>
<p>Beekeeper is the management and information processing part of Beeswarm. It is built
on top of Flask, and Twitter Bootstrap. It allows administrators to view the current
status, add new Hives/Feeders, and download bootable ISO files for them. Here are a
few screenshots of the Beekeeper, in action:</p>
<img alt="/img/pic1.png" class="align-center" src="/img/pic1.png" />
<p>The next screenshot shows the webpage for configuring a new Hive instance. The various
tabs allow one to customize the different protocols offered by the Hive instance.</p>
<img alt="/img/pic2.png" class="align-center" src="/img/pic2.png" />
<p>Apart from the management tasks, Beekeeper also does the job of classifying the sessions
done on the Hive, and maintaining the database.</p>
</div>
<div class="section" id="intelligence-of-automated-feeder-clients">
<h2>Intelligence of automated Feeder clients</h2>
<p>I'll keep this section short, since this is already discussed in my previous blog posts.
I think a small summary will be useful though:</p>
<dl class="docutils">
<dt>FTP</dt>
<dd>The client lists the files, and randomly downloads a few of them. It also sends
FTP commands such as SYST, in order more accurately emulate real clients.</dd>
<dt>HTTP(s)</dt>
<dd>The HTTP(s) clients extract the links from the root document (/index.html) and
start visiting them. They stop after a randomly generated depth is reached.</dd>
<dt>POP3(s)</dt>
<dd>The POP3(s) clients retrieve the list of available emails, and then deletes them all,
one by one. This is exactly what some mail clients do.</dd>
<dt>SMTP</dt>
<dd>The SMTP client chooses a few emails from the spam corpus that comes with Beeswarm,
and sends a random number of them to the Hive SMTP capability.</dd>
<dt>SSH/Telnet</dt>
<dd>These are more complicated than the previous examples. They use a number of methods
to act intelligently, as explained in my previous blog posts.</dd>
</dl>
</div>
<div class="section" id="deployment">
<h2>Deployment</h2>
<p>The deployment of new Hives and Feeders has become much easier, since Beeswarm now has the
ability to generate customized bootable ISO files for each of them. The ISOs are basically
generated using <a class="reference external" href="http://live.debian.net/">Debian Live</a>. A very interesting approach was
suggested by my mentor to reduce the time required for ISO generation. It goes something
like this:</p>
<ul class="simple">
<li>Generate a &quot;Base&quot; ISO, which has a dummy tarball file embedded into it. This file is filled with a specific pattern (I chose a series of '0x07' bytes).</li>
<li>Whenever a new custom ISO is required, find and overwrite the special pattern mentioned above, with an actual tar file.</li>
<li>Use it inside the ISO after boot.</li>
</ul>
<p>This brought down the time for ISO generation from about 20 minutes to around 13 seconds.</p>
<p>In order to view status easily on the bootable ISOs, I also added a Curses based UI to
Beeswarm. It's a simple status screen, not a management interface, but it does feature a
running log of current events:</p>
<img alt="/img/pic3.png" class="align-center" src="/img/pic3.png" />
</div>
<div class="section" id="conclusion">
<h2>Conclusion</h2>
<p>Working on Beeswarm was an amazing experience. If I had to make a list of new things that
I learnt during this time, I'm pretty sure it would fill up a wall.</p>
<p>I want to thank my mentor, Johnny Vestergaard, for this awesome learning experience. He
pulled me out of a tight spot more often than I'd like to admit :-) . I also thank Lukas
Rist, my backup mentor, for teaching me about Flask, Bootstrap, and web-frameworks in
general. Without that excellent web-development session, I would probably still be trying
to fix CSS and HTML on the Beekeeper Web-app. Thanks, The Honeynet Project, for accepting
my GSoC application. Also, thanks to Google for paying me and giving me the opportunity to
learn. These two things seldom occur simultaneously. Long live GSoC! :)</p>
</div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Beeswarm Updates]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/beeswarm-updates.html"/>
        <published>2013-09-01T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/beeswarm-updates.html</id>
        <category scheme="http://aniketpanse.in/tag/#beeswarm" term="beeswarm" label="beeswarm" />
        <category scheme="http://aniketpanse.in/tag/#gsoc" term="gsoc" label="gsoc" />
        <category scheme="http://aniketpanse.in/tag/#honeypots" term="honeypots" label="honeypots" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>So Beeswarm has improved a lot over the last few weeks, and I have
tried to summarize the changes here.</p>
<div class="section" id="traffic-pattern">
<h2>Traffic Pattern</h2>
<p>In my last post, I had mentioned the Telnet and SSH Bees, which have much
more intelligence now. Along with them, the FTP and SMTP bees have been
updated too. The SMTP bee now uses a static mail archive (plans are to
replace this with something more dynamic) to send emails from. The ftp
client now checks what files are there on the Hive server before trying to
download it.</p>
<p>An important aspect of the traffic pattern was the ability to configure
when sessions should occur. In other words, the timings between the client
sessions should follow the real world patterns. Things were a bit complicated
here, because every protocol had to be handled differently. Now every bee
has a specific range of time (of the day) for which it is active. We also
have a slepp interval, and an activation probability. The activation
probability will decide whether the client session will be performed the
next time the bee is activated.</p>
</div>
<div class="section" id="loads-of-bug-fixes-improvements">
<h2>Loads of Bug Fixes/Improvements</h2>
<p>A lot of minor bugs were fixed (or features implemented).</p>
<ol class="arabic simple">
<li>Generation of self-signed cert/keys at startup</li>
<li>Fixing of the HTTPS capability, which resulted in &quot;ssl_rx_record_too_long&quot; errors.</li>
<li>Fixed a bug in packaging where one of the data files was not being copied.</li>
</ol>
<p>All in all, getting things working is much more smoother now.</p>
</div>
<div class="section" id="iso-generation">
<h2>ISO Generation</h2>
<p>This is one of the most exciting thing I've worked on. Ever. Beeswarm now
let's users download pre-configured, bootable ISO images of the new Hives/Feeders
which are created from the web-interface. And it's as simple as clicking &quot;Download
ISO&quot;. There were quite a bit of challenges here, but I'll save them for my next
blog post ;)</p>
</div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Beeswarm - Week 4]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/gsoc-week-4.html"/>
        <published>2013-07-29T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/gsoc-week-4.html</id>
        <category scheme="http://aniketpanse.in/tag/#beeswarm" term="beeswarm" label="beeswarm" />
        <category scheme="http://aniketpanse.in/tag/#gsoc" term="gsoc" label="gsoc" />
        <category scheme="http://aniketpanse.in/tag/#honeypots" term="honeypots" label="honeypots" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>This week was all about making the Bees (the automated sessions on the Honeypot)
look more legit. So, at the first glance, it should be able to be convincing
enough for a potential attacker to think that this is a real user using the system.</p>
<p>The best way to make the Bees more 'intelligent' was to implement a Sense -&gt;
Decide -&gt; Act loop (SDA). This involved making a lot of changes to the bees, and
the way data is sent over the raw sockets.</p>
<div class="section" id="telnet-ssh">
<h2>1. Telnet &amp; SSH</h2>
<p>Since the basic functionality offered by these two protocols is the same, I decided
to write a common backend for both. Designing this meant that I needed a common
high-level API for both the Bees, which would allow me to handle the data flow in
an easy way, using a common base class.</p>
<p>Another interesting change that I made was emulating user keystrokes on the Telnet Bee.
Using the timing data from <a class="reference external" href="http://www.cs.berkeley.edu/~dawnsong/papers/ssh-timing.pdf">this paper</a>, along with Python's great <tt class="docutils literal">random</tt> library, I
was able to generate appropriate intervals and emulate the general typing characteristics
of a person. This was done in by overriding the write() method of the <tt class="docutils literal">telnetlib.Telnet</tt>
class.</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">write_human</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buffer_</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot; Emulates human typing speed &quot;&quot;&quot;</span>

    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">IAC</span> <span class="ow">in</span> <span class="n">buffer_</span><span class="p">:</span>
        <span class="n">buffer_</span> <span class="o">=</span> <span class="n">buffer_</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">IAC</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">IAC</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">IAC</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">msg</span><span class="p">(</span><span class="s">&quot;send </span><span class="si">%r</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buffer_</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">buffer_</span><span class="p">:</span>
        <span class="n">delta</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">gauss</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">sock</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">delta</span><span class="o">/</span><span class="mf">1000.0</span><span class="p">)</span> <span class="c"># Convert milliseconds to seconds</span>
</pre></div>
<p>In order to make the SDA loop realistic, I created a simple data structure, a sort
of mapping, which would help the Bee choose the next command to execute. Something
like this:</p>
<div class="highlight"><pre><span class="n">COMMAND_MAP</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">&#39;pwd&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ls&#39;</span><span class="p">,</span> <span class="s">&#39;uname&#39;</span><span class="p">,</span> <span class="s">&#39;uptime&#39;</span><span class="p">],</span>
    <span class="s">&#39;cd&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ls&#39;</span><span class="p">],</span>
    <span class="s">&#39;uname&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;uptime&#39;</span><span class="p">,</span> <span class="s">&#39;ls&#39;</span><span class="p">],</span>
    <span class="s">&#39;ls&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;cd&#39;</span><span class="p">,</span> <span class="s">&#39;cat&#39;</span><span class="p">,</span> <span class="s">&#39;pwd&#39;</span><span class="p">],</span>
    <span class="s">&#39;cat&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ls&#39;</span><span class="p">,</span> <span class="s">&#39;echo&#39;</span><span class="p">,</span> <span class="s">&#39;sudo&#39;</span><span class="p">,</span> <span class="s">&#39;pwd&#39;</span><span class="p">],</span>
    <span class="s">&#39;uptime&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ls&#39;</span><span class="p">,</span> <span class="s">&#39;echo&#39;</span><span class="p">,</span> <span class="s">&#39;sudo&#39;</span><span class="p">,</span> <span class="s">&#39;uname&#39;</span><span class="p">,</span> <span class="s">&#39;pwd&#39;</span><span class="p">],</span>
    <span class="s">&#39;echo&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ls&#39;</span><span class="p">,</span> <span class="s">&#39;sudo&#39;</span><span class="p">,</span> <span class="s">&#39;uname&#39;</span><span class="p">,</span> <span class="s">&#39;pwd&#39;</span><span class="p">],</span>
    <span class="s">&#39;sudo&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;logout&#39;</span><span class="p">]</span>
<span class="p">}</span>
</pre></div>
<p>Here, the RHS for every command contains commands that can be run after it. So, in general,
a <tt class="docutils literal">cd</tt> should be followed by an <tt class="docutils literal">ls</tt>, and so on.</p>
<p>Along with these changes, I also improved and refactored the code a lot. This time,
we also have test cases for each command, and I'm beginning to see the benefits of
Test-Driven-Development. Next week will be dedicated to the rest of the Bees. Now
that I have a clear idea of what needs to be done, I hope I'll be able to finish the
work on all of them.</p>
</div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Beeswarm - Week 3]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/gsoc-week-3.html"/>
        <published>2013-07-21T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/gsoc-week-3.html</id>
        <category scheme="http://aniketpanse.in/tag/#beeswarm" term="beeswarm" label="beeswarm" />
        <category scheme="http://aniketpanse.in/tag/#gsoc" term="gsoc" label="gsoc" />
        <category scheme="http://aniketpanse.in/tag/#honeypots" term="honeypots" label="honeypots" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>Ah a lot to talk about this time! BeeSwarm's coming along very well indeed.
There's much improved security, with respect to the communications between the BeeKeeper
(the Web-UI) and the Hive/Feeder. Hive is the actual Honeypot, while the Feeder
is a collection of clients which will attract traffic to the Honeypot.</p>
<p>The major part in the third week was to shift the web server to HTTPS. This
is important because the data about the captured attacks will likely be sent over the
same interface as the Honeypot, so there's always a chance that someone might be sniffing
the traffic. Sending JSON data over plain HTTP would definitely be a dead give-away.</p>
<p>Basically, securing the web API consisted of the following major steps:</p>
<ul class="simple">
<li>Changing the server, so that it uses SSL</li>
<li>Updating the clients so they communicate over SSL too</li>
<li>Since it's important to validate the data, it was also necessary to implement session support in the server/clients.</li>
</ul>
<div class="section" id="ssl-server">
<h2>SSL Server</h2>
<p>Prior to working on this, Beekeeper ran on <tt class="docutils literal">gevent.wsgi.WSGIServer</tt>. This
particular implementation doesn't support SSL. Initially, the plan was to use <a class="reference external" href="http://gunicorn.org/">Gunicorn</a>.
However, I felt that such performance was not necessary here, since in all probability
the Web-UI will be used by only a few people at a time. That's why we decided to keep
things simple and use <tt class="docutils literal">gevent.pywsgi.WSGIServer</tt>. Both use the same API, which meant that
I had to make very few changes in the code itself. One major change was that I had to
create a self-signed cert for the BeeKeeper. This created some difficulties. Since version
1.0.x, <a class="reference external" href="http://www.openssl.org/">OpenSSL</a> generates private keys using different headers
than the previous version. Unfortunately, the pyOpenSSL wrapper doesn't yet support the
functionality to convert between different PrivateKey formats. This means that the certificate
has to be generated externally, before running the Beekeeper. It can be done this way:</p>
<div class="highlight"><pre><span class="gp">$</span> openssl genrsa -des3 -out beekeeper.key 2048
<span class="gp">$</span> openssl req -new -key beekeeper.key -out beekeeper.csr
<span class="gp">$</span> openssl x509 -req -days <span class="m">3650</span> -in beekeeper.csr -signkey beekeeper.key -out beekeeper.crt
<span class="gp">$</span> openssl rsa -in beekeeper.key -out beekeeper.key
</pre></div>
<p>The interesting step is the last step, which is the one where the passphrase is removed from
the key. This is the step that cannot be done in pyOpenSSL.</p>
<p>Anyway, the server finally did get going, and I next had to modify the clients so they worked
over SSL.</p>
</div>
<div class="section" id="ssl-clients">
<h2>SSL Clients</h2>
<p>The <a class="reference external" href="http://python-requests.org/">python-requests</a> library, which we're using in BeeSwarm
has great SSL support, so I didn't think there would be a lot of problems with it.
All I really had to do was store the certificate in the config file for the client
(which would be a Hive or Feeder) and pass <tt class="docutils literal">verify=True</tt> as an argument while making the
request. I was wrong :) Actually, the problem didn't lie in the library, I just didn't
understand the documentation well enough.</p>
<p>After creating the self-signed cert and key, my server worked well with the browser
(I used Firefox/Chrome), however, it kept failing with EOF errors. At the same time,
the client failed with an &quot;unknown CA&quot; error. The server was failing because the client
refused to accept the certificate. Quite frankly, I had no idea how to get past this
problem. It was then that my mentor (<a class="reference external" href="https://github.com/johnnykv">&#64;johnnykv</a>)
pointed out that the cert was to be passed to the verify parameter, instead of just
passing a Bool. After that, it was pretty smooth sailing, and the client and it worked
like a charm :)</p>
</div>
<div class="section" id="logins">
<h2>Logins</h2>
<p>Another major functionality that was implemented in week 3 was a Login mechanism for
the Hive/Feeders. The idea was that each client must login to the Beekeeper before
transmitting any data. This means that the data should only be accepted from trusted
sources.</p>
<p>This part was not very hard to implement actually. it was done by adding a new User
into the database every time a new Hive/Feeder was created. The user ID would be the
same as the UUID used for the Hive/Feeder, while the password was another, randomly
generated UUID. This time, I had to use <tt class="docutils literal">requests.Session</tt> which would handle the cookies
and other session business.</p>
<p>I had originally planned to merge the posts for weeks 3 &amp; 4, but since this has
become so long, I guess I'll have to split it anyway. Expect another long post tomorrow!</p>
</div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Beeswarm - Week 2]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/gsoc-week-2.html"/>
        <published>2013-07-05T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/gsoc-week-2.html</id>
        <category scheme="http://aniketpanse.in/tag/#beeswarm" term="beeswarm" label="beeswarm" />
        <category scheme="http://aniketpanse.in/tag/#gsoc" term="gsoc" label="gsoc" />
        <category scheme="http://aniketpanse.in/tag/#honeypots" term="honeypots" label="honeypots" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>A pretty quiet week, this one (I moved to a new city). We now have a POP3s capability.
There are a few problems with the HTTPS capability, which results in SSL errors on
the major browsers. It has been decided to handle these a bit later.</p>
<p>The cool part is that I have started working on <a class="reference external" href="https://github.com/honeynet/beeswarm/issues/89">Issue #89</a>. It'll require quite a few
changes to the core web-app, so I'll likely be very busy in the coming week. Also,
I need to decide on a suitable WSGI server, which will serve traffic over SSL and
which works with Gevent. I am currently considering <tt class="docutils literal">Gunicorn</tt> or the bundled
<tt class="docutils literal">gevent.pywsgi.WSGIServer</tt>. I guess I'll be properly occupied in the coming weeks.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Beeswarm - Week 1]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/gsoc-week-1.html"/>
        <published>2013-06-25T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/gsoc-week-1.html</id>
        <category scheme="http://aniketpanse.in/tag/#beeswarm" term="beeswarm" label="beeswarm" />
        <category scheme="http://aniketpanse.in/tag/#gsoc" term="gsoc" label="gsoc" />
        <category scheme="http://aniketpanse.in/tag/#honeypots" term="honeypots" label="honeypots" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>As a part of GSoC 2013, I'm working on improving <a class="reference external" href="https://github.com/honeynet/beeswarm">BeeSwarm</a>.
This is the first of my weekly updates (and probably the longest). It's been a pretty eventful
first week of GSoC. A lot of code was written, knowledge gained and planning
done! :) Here's a short summary:</p>
<p>Improving the SSH and Telnet capabilities:</p>
<ul class="simple">
<li>The Hive now accepts logins and allows users to run a bunch of common commands (ls, cat, cd, uname, etc) on the SSH and Telnet capabilities.</li>
<li>A lot of code was refactored, so that implementation of new commands is easier, and common to both the capabilities.</li>
<li>Quite a few minor bug-fixes, and the Telnet Bee was improved, so that it handled the options negotiations in the right way.</li>
</ul>
<p>Improving the Web-App UI:</p>
<ul class="simple">
<li>The Beekeeper now boasts a new UI, built on Twitter Bootstrap.</li>
<li>It is now possible (and necessary) to login to the web-app in order to perform
administrative tasks and view the logs.</li>
<li>The logs are displayed in a pretty table, and sorting and pagination is possible.</li>
<li>BeeSwarm no longer depends upon Flask-Bootstrap.</li>
</ul>
<p>This week, I plan to secure the BeeKeeper API. The Hive and Feeder should refuse
sending data in case an invalid certificate is detected. I have a feeling
implementing this will be much harder than it sounds.. looking forward to a busy week!</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Using Liquidluck (Felix Felicis) - Part II]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/using-liquidluck-ii.html"/>
        <published>2013-06-01T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/using-liquidluck-ii.html</id>
        <category scheme="http://aniketpanse.in/tag/#blog" term="blog" label="blog" />
        <category scheme="http://aniketpanse.in/tag/#web" term="web" label="web" />
        <category scheme="http://aniketpanse.in/tag/#static-blog" term="static-blog" label="static-blog" />
        <category scheme="http://aniketpanse.in/tag/#liquidluck" term="liquidluck" label="liquidluck" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>This is a continuation of the <a class="reference external" href="/2013/using-liquidluck.html">Part-I</a>,
of the Liquidluck tutorial. Upto this point, we have discussed the following:</p>
<ul class="simple">
<li>Installation</li>
<li>Setting up the Website</li>
<li>Writing Posts/Pages</li>
</ul>
<p>We shall now continue with themes, and also touch upon publishing the websites
on GitHub.</p>
<div class="section" id="themes">
<h2>Themes</h2>
<p>Now that you can write posts and pages, I guess you will want to tweak the overall
look or 'feel' of your website. 'Luckily', Liquidluck has awesome support for the
installation and search of new themes. Here's how you can search for new themes:</p>
<div class="highlight"><pre><span class="gp">(felix_env)$</span> liquidluck search
</pre></div>
<p>It'll give you a nicely formatted output with the theme name and stuff. If you like
the name of any of the themes, you can install it like this:</p>
<div class="highlight"><pre><span class="gp">(felix_env)$</span> liquidluck install &lt;theme-name&gt;
</pre></div>
<p>Pretty easy, eh? It sure would be great to preview the themes though, if possible.
So what you can do is, install all the themes in one go and try them out, one by one.
I had some problems with installing a few of the themes from GitHub, so I wrote the
following script to do it for me. Basically, it clones the theme repos into our <cite>_themes</cite>
directory, so that they are immediately available to Liquidluck.</p>
<div class="highlight"><pre>git clone git://github.com/lepture/liquidluck-theme-chiang.git ./_themes/chiang
git clone git://github.com/lepture/liquidluck-theme-moment.git ./_themes/moment
git clone git://github.com/bingdian/liquidluck-theme-responsive.git ./_themes/responsive
git clone git://github.com/bcho/liquidluck-theme-cb3f20.git ./_themes/cb3f20
git clone git://github.com/lianqin7/liquidluck-theme-icbu.git ./_themes/icbu
git clone git://github.com/microjo/liquidluck-theme-lovelymod.git ./_themes/lovelymod
git clone git://github.com/lepture/liquidluck-theme-bootstrap.git ./_themes/bootstrap
git clone git://github.com/lepture/liquidluck-theme-octopress.git ./_themes/octopress
git clone git://github.com/leandromouta/liquidluck-theme-thegrey.git ./_themes/thegrey
git clone git://github.com/popomore/liquidluck-theme-reveal.git ./_themes/reveal
</pre></div>
<p>Note that you should run this script from the root of your website. That is, the parent
of the <tt class="docutils literal">contents</tt> directory. You can customize/modify the themes easily, since they use
the Jinja2 templating language. The <a class="reference external" href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-ii-templates">templating part</a> of the Flask mega tutorial gives an
awesome introduction to Jinja2 templates, so you might want to go through it.</p>
</div>
<div class="section" id="publishing-on-github">
<h2>Publishing on GitHub</h2>
<p>Now that you have (hopefully) decided on the theme, and are able to write new posts and
create pages, you might want to publish your website. One of the easiest ways to do this,
is on GitHub itself. In order to host your website on GitHub, you first need an account
on GitHub. If you're already familiar with Git in general, then all you need to do is,
create a new repo with the name <tt class="docutils literal"><span class="pre">&lt;username&gt;.github.io</span></tt>, and push the pages (in the deploy
folder to this repo. They will automatically be served by GitHub, on the URL
<tt class="docutils literal"><span class="pre">&lt;username&gt;.github.io</span></tt>. (Replace 'username' with your actual username!)</p>
<p>If you're not familiar with it, create an account on GitHub. Once you've registered and
your email address is verified, you can create new repos. In order to create a new repo,
click on the New Repo button (right next to the settings button). In the 'repository name'
field, enter <tt class="docutils literal"><span class="pre">&lt;username&gt;.github.io</span></tt> (Replace the username with your own!). Note this
name, we're going to use it later.</p>
<p>Now, on your local machine, create a new git repository in the <tt class="docutils literal">deploy</tt> directory.</p>
<div class="highlight"><pre><span class="gp">(felix_env)$</span> <span class="nb">cd </span>deploy
<span class="gp">(felix_env)$</span> git init .
<span class="gp">(felix_env)$</span> git add .
<span class="gp">(felix_env)$</span> git commit -m <span class="s2">&quot;initial commit&quot;</span>
<span class="gp">(felix_env)$</span> git remote add origin https://github.com/czardoz/&lt;repo-name&gt;.git
<span class="gp">(felix_env)$</span> git push -u origin master
</pre></div>
<p>Note that you must replace &lt;repo-name&gt; with the repository name that you have given.
If you've done it all properly, you can now see your website hosted on <a class="reference external" href="https:/">https:/</a>/&lt;username&gt;.github.io!</p>
</div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Using Liquidluck (Felix Felicis) - Part I]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/using-liquidluck.html"/>
        <published>2013-05-23T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/using-liquidluck.html</id>
        <category scheme="http://aniketpanse.in/tag/#blog" term="blog" label="blog" />
        <category scheme="http://aniketpanse.in/tag/#web" term="web" label="web" />
        <category scheme="http://aniketpanse.in/tag/#static-blog" term="static-blog" label="static-blog" />
        <category scheme="http://aniketpanse.in/tag/#liquidluck" term="liquidluck" label="liquidluck" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>This post is a follow up to my <a class="reference external" href="/2013/moving-to-liquidluck.html">previous post</a>.
Although the liquidluck documentation is all you really need, I'll try
to explain how I made my personal website, and published it on GitHub.</p>
<div class="section" id="installing-felix-felicis">
<h2>Installing 'Felix Felicis'</h2>
<p>Liquidluck is available as a PyPi package, so you can install it in the
standard way. It's always better to install in a Virtual Environment, so
that it keeps out of the way and doesn't interfere with your base Python
installation. In order to do this, you need to install virtualenv itself.</p>
<div class="highlight"><pre><span class="gp">#</span> pip install virtualenv
</pre></div>
<p>If you don't have pip, you can use easy_install, like this:</p>
<div class="highlight"><pre><span class="gp">#</span> easy_install -U pip
</pre></div>
<p>There are a <a class="reference external" href="http://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install">lot of reasons</a> why pip is preferred over easy_install.
Anyway, once you have pip, you can use it to install virtualenv. You can then do:</p>
<div class="highlight"><pre><span class="gp">$</span> virtualenv --no-site-packages felix_env
</pre></div>
<p>This will create a new directory (a special one which is called a virtual
environment) in your current working directory. You can now install new Python
packages by 'activating' this new environment and using pip. Something like:</p>
<div class="highlight"><pre><span class="gp">$</span> <span class="nb">source</span> ./felix_env/bin/activate
<span class="gp">(felix_env)$</span> pip install &lt;package-name&gt;
</pre></div>
<p>Notice how the prompt changes, to indicate which virtualenv you are currently
using. This is dead useful when we need to work with multiple environments.
You can now install liquidluck as outlined above, just use liquidluck as the
package name. If you're like me, and want to use the latest 'bleeding edge'
version, instead of using the standard package name, you can use the git version
as follows:</p>
<div class="highlight"><pre><span class="gp">(felix_env)$</span> pip install git+https://github.com/lepture/liquidluck.git
</pre></div>
</div>
<div class="section" id="setting-up-the-website">
<h2>Setting up the Website</h2>
<p>We are now ready to actually start building the website. Let's call the new
website 'newblog'. You should start by creating a new directory for our blog,
and tell liquidluck to set everything up for us.</p>
<div class="highlight"><pre><span class="gp">(felix_env)$</span> mkdir newblog
<span class="gp">(felix_env)$</span> <span class="nb">cd </span>newblog
<span class="gp">(felix_env)$</span> liquidluck init
</pre></div>
<p>You will then be asked for your config file format, for which I chose Python (and that's the format I'll be using in this tutorial). I kept the posts and output folders at their default values.</p>
<p>Now that the directory is initialized, we must make a few changes in the config
file. I recommend that you set at least the site name, the site URL, the Author
name, and uncomment reStructuredText reader. If you don't want to end up with
broken tag links, you might also uncomment all the Writers. Also set any other
variables you wish to, the default file is pretty well commented. Ultimately, you
should end up with a config file like this (comments removed for brevity):</p>
<div class="highlight"><pre><span class="n">site</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;Your Name&quot;</span><span class="p">,</span>
    <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="s">&quot;http://some-website.com&quot;</span><span class="p">,</span>
<span class="p">}</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">&quot;source&quot;</span><span class="p">:</span> <span class="s">&quot;content&quot;</span><span class="p">,</span>
    <span class="c"># ... A few more here ... #</span>
    <span class="s">&quot;timezone&quot;</span><span class="p">:</span> <span class="s">&quot;+00:00&quot;</span><span class="p">,</span>
<span class="p">}</span>


<span class="n">author</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">&quot;default&quot;</span><span class="p">:</span> <span class="s">&quot;Your Nickname&quot;</span><span class="p">,</span>
    <span class="s">&quot;vars&quot;</span><span class="p">:</span> <span class="p">{}</span>
<span class="p">}</span>

<span class="n">reader</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">&quot;active&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s">&quot;liquidluck.readers.markdown.MarkdownReader&quot;</span><span class="p">,</span>
        <span class="s">&quot;liquidluck.readers.restructuredtext.RestructuredTextReader&quot;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="s">&quot;vars&quot;</span><span class="p">:</span> <span class="p">{}</span>
<span class="p">}</span>

<span class="n">writer</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">&quot;active&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s">&quot;liquidluck.writers.core.PostWriter&quot;</span><span class="p">,</span>
        <span class="c"># ... a few more here ... #</span>
        <span class="s">&quot;liquidluck.writers.core.CategoryFeedWriter&quot;</span><span class="p">,</span>
        <span class="s">&quot;liquidluck.writers.core.TagWriter&quot;</span><span class="p">,</span>
        <span class="s">&quot;liquidluck.writers.core.TagCloudWriter&quot;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="s">&quot;vars&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">theme</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;default&quot;</span><span class="p">,</span>
    <span class="s">&quot;vars&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">template</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">&quot;vars&quot;</span><span class="p">:</span> <span class="p">{},</span>
    <span class="s">&quot;filters&quot;</span><span class="p">:</span> <span class="p">{},</span>
<span class="p">}</span>
</pre></div>
<p>Now that the website is set up, we are ready to create our first blog post.</p>
</div>
<div class="section" id="writing-a-post">
<h2>Writing a Post</h2>
<p>Felix Felicis supports posts in Markdown, or in reStructuredText. Choosing any
of them is up to you. Personally, I find rST to be more flexible, offering a
richer set of features and so, I'll be using it in this tutorial. (As an interesting
aside, this blog post is also written in rST).</p>
<p>Let's call our first post 'Hello Felix':</p>
<div class="highlight"><pre><span class="gp">(felix_env)$</span> vim content/hello-felix.rst
</pre></div>
<p>This will open up the vim editor (You can use any text editor you like).
You can then type the content of the post, and save the file. If you're too lazy
to type, and just want to get the thing working for now, use the following
block of code:</p>
<div class="highlight"><pre><span class="gh">Hello Felix!</span>
<span class="gh">============</span>

<span class="nc">:date:</span> <span class="nf">2013-02-15</span>
<span class="nc">:tags:</span> <span class="nf">blog, web</span>
<span class="nc">:category:</span> <span class="nf">misc</span>

Hello Felix! This is my first post! :-)
</pre></div>
<p>Once you save the file, you can see the result by 'building' the website and then
viewing it in your browser. For that you must also run the liquidluck server:</p>
<div class="highlight"><pre><span class="gp">(felix_env)$</span> liquidluck build
<span class="gp">(felix_env)$</span> liquidluck server
</pre></div>
<p>You can now view the new website by visiting <a class="reference external" href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>. The awesome
part about this server is that it automatically refreshes your browser tab as
and when you make changes to your website! I've had too much experience of
refreshing a webpage every time I make any change in my code, so I fully
appreciate the utility of this awesome little tool.</p>
</div>
<div class="section" id="adding-a-page">
<h2>Adding a Page</h2>
<p>Most of the times, you want to add a page to your site, say 'About', or 'Contact'.
Liquidluck supports the generation of static web pages too. The only difference
between a post and a page is that a page doesn't have a date associated with it.</p>
<p>Let's add an 'About' page,</p>
<div class="highlight"><pre><span class="gp">(felix_env)$</span> vim content/about.rst
</pre></div>
<p>That has the following content:</p>
<div class="highlight"><pre><span class="gh">About:</span>
<span class="gh">========</span>

Some stuff I want to say about myself.
</pre></div>
<p>Build the site again, and view the new page in your browser, as outlined before.
You'll have to visit <a class="reference external" href="http://127.0.0.1:8000/about.html">http://127.0.0.1:8000/about.html</a> in order to see the new page.</p>
<p>That's all for the first part. My next post will deal with publishing the website
on GitHub. See you then!</p>
</div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[I moved my blog!]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/moving-to-liquidluck.html"/>
        <published>2013-05-19T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/moving-to-liquidluck.html</id>
        <category scheme="http://aniketpanse.in/tag/#blog" term="blog" label="blog" />
        <category scheme="http://aniketpanse.in/tag/#web" term="web" label="web" />
        <category scheme="http://aniketpanse.in/tag/#static-blog" term="static-blog" label="static-blog" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>Been a while since I've been active. I've been procrastinating writing
new stuff because it was such a pain to write all my posts in pure HTML.
I needed something better, so I could focus on the content, rather than
worrying about the HTML tags. I needed a nice little framework, which
would let me write, and handle CSS, colors and links for me.</p>
<p>Now for most people, Wordpress would suffice. Actually, it won't just
suffice, people will start loving it. It has just about everything a blogger
would want. Tags, themes, comments, plugin extensions, you name it and
it's there. But with that comes a load of bloat. Plus I didn't want
something that's PHP based. (I've got nothing against PHP, but it just
<a class="reference external" href="http://phpsadness.com/">doesn't seem very elegant</a>).</p>
<p>I went through a few other blogging platforms, and ended up liking
none of them. Basically, I needed these features in my framework:</p>
<ul class="simple">
<li>Support for posts in Markdown or reStructuredText</li>
<li>Easy deployment (should take less that 3 minutes)</li>
<li>Extensible</li>
<li>Good theme support</li>
</ul>
<p>Static blog generators did fit the bill well. The added advantage of
static generators is that I don't need a hi-fi server to host my website.
There's an insane amount of choice when it comes to static website
generators. We have them in Ruby, Python, Java and there's even one <a class="reference external" href="http://jaspervdj.be/hakyll/">in
Haskell</a>. A quick search on GitHub shows
159 repositories. You might also want to check out the <a class="reference external" href="https://github.com/pinceladasdaweb/Static-Site-Generators">list of static
website generators</a>.</p>
<p>To summarize, there are a lot of static website generators. And it's
really hard to choose one. After trying to work with Jekyll, Hyde,
Tinkerer, Pelican, Obraz, Poole, Acrylamid, I finally came across <a class="reference external" href="http://lab.lepture.com/liquidluck/">Felix
Felicis</a>. What attracted me about it (apart from the name!) is that it
is extremely easy to search for, install and modify themes. I am
currently using a sort of modified version of the default theme.</p>
<p>I'll do a short write up on how to set everything up in my next post.
However, the <a class="reference external" href="http://liquidluck.readthedocs.org/en/latest/">documentation</a> is really worth checking out.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[A Beeswarm Update]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/beeswarm-update-http.html"/>
        <published>2013-03-15T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/beeswarm-update-http.html</id>
        <category scheme="http://aniketpanse.in/tag/#linux" term="linux" label="linux" />
        <category scheme="http://aniketpanse.in/tag/#security" term="security" label="security" />
        <category scheme="http://aniketpanse.in/tag/#honeypots" term="honeypots" label="honeypots" />
        <category scheme="http://aniketpanse.in/tag/#networking" term="networking" label="networking" />
        <category scheme="http://aniketpanse.in/tag/#beeswarm" term="beeswarm" label="beeswarm" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>I had started actively contributing to Beeswarm and as I had mentioned
before I was working on adding pyFTPdlib 1.0 support. Turns out, since
we we only using a rather small part of it, I didn't have to do a whole
lot of changes. In the end I ended up adding support for a custom FTP
banner, which wasn't much work really. But I did get to learn a lot more
about the whole development process. I especially got to know a lot more
of git.</p>
<p>I then took up the task of adding support for HTTP 'Basic' Authorization,
as detailed in RFC 2617. Since I have already written a brute-forcer for
HTTP-Proxy Authorization, I thought this would not be very hard to implement,
considering Python's extensive HTTP support. I had anticipated a few snags
though, since I had to integrate this with HiveStreamServer, whereas the
documentation mostly consists of examples which use SocketServer.TCPServer.
Since the request handling is done by BaseHTTPServer, I tried to integrate
it with Beeswarm. This led to a situation where I had two different servers
running (for the HTTP capability). Here's the code for the capability itself:</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">http</span><span class="p">(</span><span class="n">HandlerBase</span><span class="p">):</span>

    <span class="sd">&quot;&quot;&quot;The HTTP Capability&quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sessions</span><span class="p">,</span> <span class="n">options</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">http</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">sessions</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_options</span> <span class="o">=</span> <span class="n">options</span>

    <span class="k">def</span> <span class="nf">handle_session</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">gsocket</span><span class="p">,</span> <span class="n">address</span><span class="p">):</span>
        <span class="n">session</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_session</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">gsocket</span><span class="p">)</span>
        <span class="n">handler</span> <span class="o">=</span> <span class="n">BeeHTTPHandler</span><span class="p">(</span><span class="n">gsocket</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="n">httpsession</span> <span class="o">=</span> <span class="n">session</span><span class="p">,</span>
                                    <span class="n">options</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_options</span><span class="p">)</span>
</pre></div>
<p>Here the gsocket is the one created by the Hive, for my capability. The
problem I ran into was, that there was no way of passing my own socket to the
BaseHTTPServer class. I was rather stuck over here, but then the Lead Developer
(who's been mentoring me), pointed out that I can use the *Handler classes
without a Server, by instantiating them directly, with the first argument as our
socket. Once this was figured out, it was pretty straightforward writing the
BeeHTTPHandler class.</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">BeeHTTPHandler</span><span class="p">(</span><span class="n">BaseHTTPRequestHandler</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">client_address</span><span class="p">,</span> <span class="n">server</span><span class="p">,</span> <span class="n">httpsession</span><span class="p">,</span> <span class="n">options</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_options</span> <span class="o">=</span> <span class="n">options</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_options</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="s">&#39;banner&#39;</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_banner</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_options</span><span class="p">[</span><span class="s">&#39;banner&#39;</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_banner</span> <span class="o">=</span> <span class="s">&quot;Microsoft-IIS/5.0&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_session</span> <span class="o">=</span> <span class="n">httpsession</span>
        <span class="n">BaseHTTPRequestHandler</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">client_address</span><span class="p">,</span> <span class="n">server</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">do_HEAD</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="o">...</span>

    <span class="k">def</span> <span class="nf">do_AUTHHEAD</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="o">...</span>

    <span class="k">def</span> <span class="nf">do_GET</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="o">...</span>
</pre></div>
<p>The do_* methods are pretty standard, so I won't bother elaborating on those.
The interesting part is where I had to call the parent constructor after
initializing a few attributes, since it calls methods which use these attributes.
I added support for a user-definable 'banner' which will allow the Hive to
'impersonate' other servers, such as Microsoft-IIS or Apache. I also wrote a
unittest, which uses the httplib to connect to the server and verifies whether
the server is sending 401-Unauthorized status code.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[TCP Server Plugin for Kate]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/kate-tcpserver-plugin.html"/>
        <published>2013-03-09T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/kate-tcpserver-plugin.html</id>
        <category scheme="http://aniketpanse.in/tag/#linux" term="linux" label="linux" />
        <category scheme="http://aniketpanse.in/tag/#kde" term="kde" label="kde" />
        <category scheme="http://aniketpanse.in/tag/#Qt" term="Qt" label="Qt" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>I've been working on Kate for some time now. As I mentioned before, I
was trying to make a TCP Server plugin for Kate, where there's a simple
TCP server running on some port, and data recieved on that port is
entered into the editor. I finally got it to work the day before. There
are a few intricacies about this and I'll point those out here, for
everyone's benefit (including my own!).</p>
<p>Before I get down to explaining the code, I would like to clarify that
this is not really a Kate plugin. It's a plugin for 'KTextEditor' which
is a pluggable interface you can use in your own code. So this plugin
is functional in both Kwrite and Kate. (In Kate, it'll show up under
'Extensions', not 'Plugins'.) Also, when I wrote this plugin, I was
following the <a class="reference external" href="https://techbase.kde.org/Development/Tutorials/Kate/KTextEditor_Plugins">excellent tutorial on the KDE Techbase</a>,
so what I've done is a kind of extension of the plugin described there.</p>
<p>Every KTextEditor plugin needs a '.rc' file for the UI, a '.desktop'
file where some generic information about the plugin is specified.
There's a CMakeLists.txt file which specifies how you want the plugin
to be compiled and takes care of a few other things, such as moving
the '.rc' and '.desktop' files to the appropriate places. We'll use
the following files:</p>
<ul class="simple">
<li>Desktop File: <a class="reference external" href="https://github.com/czardoz/ktexteditor-tcpserver-plugin/blob/master/ktexteditor-tcpserver.desktop">ktexteditor-tcpserver.desktop</a></li>
<li>UI File: <a class="reference external" href="https://github.com/czardoz/ktexteditor-tcpserver-plugin/blob/master/tcpserverui.rc">tcpserverui.rc</a></li>
<li>Header File: <a class="reference external" href="https://github.com/czardoz/ktexteditor-tcpserver-plugin/blob/master/tcpserver.hpp">tcpserver.hpp</a></li>
<li>Implementation File: <a class="reference external" href="https://github.com/czardoz/ktexteditor-tcpserver-plugin/blob/master/tcpserver.cpp">tcpserver.cpp</a></li>
<li>CMakeLists: <a class="reference external" href="https://github.com/czardoz/ktexteditor-tcpserver-plugin/blob/master/CMakeLists.txt">CMakeLists.txt</a></li>
</ul>
<p>It's best to start with the '.desktop' file, since it contains the
name of the plugin (as well as the author!) and other important information.</p>
<div class="highlight"><pre>###
##     Desktop Configuration File
#

[Desktop Entry]
Encoding=UTF-8
X-KDE-Library=ktexteditor-tcpserver
X-KDE-PluginInfo-Author=Aniket Panse
X-KDE-PluginInfo-Email=contact@aniketpanse.in
X-KDE-PluginInfo-Name=ktexteditortcpserver
X-KDE-PluginInfo-Version=0.1
X-KDE-PluginInfo-Website=http://kate.kde.org
X-KDE-PluginInfo-Category=Editor
X-KDE-PluginInfo-Depends=
X-KDE-PluginInfo-License=GPL
X-KDE-PluginInfo-EnabledByDefault=false
X-KDE-ParentApp=kate
X-KDE-Version=4.0
ServiceTypes=KTextEditor/Plugin
Type=Service
Icon=korganizer
Name=TCP Server
Comment=Inserts data from a TCP socket.
</pre></div>
<p>Since all these have been explained in the original tutorial, I won't go
into the details. But I'll mention one point. The <cite>X-KDE-Library</cite> value
absolutely has to be the name of the library that you're going to build.
This library name is also used in CMakeLists.txt as we'll see. Here's the
CMakeLists.txt file which we'll use:</p>
<div class="highlight"><pre><span class="c">###</span>
<span class="c">##     CMakeLists.txt</span>
<span class="c">#</span>


<span class="c">#We need KDE 4</span>
<span class="nb">find_package</span><span class="p">(</span><span class="s">KDE4</span> <span class="s">REQUIRED</span><span class="p">)</span>

<span class="nb">include</span><span class="p">(</span><span class="s">KDE4Defaults</span><span class="p">)</span>
<span class="nb">include_directories</span><span class="p">(</span><span class="o">${</span><span class="nv">KDE4_INCLUDES</span><span class="o">}</span><span class="p">)</span>

<span class="nb">kde4_add_plugin</span><span class="p">(</span><span class="s">ktexteditor-tcpserver</span> <span class="s">tcpserver.cpp</span><span class="p">)</span>

<span class="c">#   Here&#39;s what I was referring to before. The first argument HAS to match</span>
<span class="c">#   the library name we defined in the desktop configuration file.</span>
<span class="nb">target_link_libraries</span><span class="p">(</span><span class="s">ktexteditor-tcpserver</span> <span class="o">${</span><span class="nv">KDE4_KDECORE_LIBS</span><span class="o">}</span> <span class="o">${</span><span class="nv">KDE4_KDEUI_LIBS</span><span class="o">}</span> <span class="s">ktexteditor</span><span class="p">)</span>

<span class="c">#   Build the library</span>
<span class="nb">install</span><span class="p">(</span><span class="s">TARGETS</span> <span class="s">ktexteditor-tcpserver</span> <span class="s">DESTINATION</span> <span class="o">${</span><span class="nv">PLUGIN_INSTALL_DIR</span><span class="o">}</span><span class="p">)</span>

<span class="c">#   Copy the useful files into the file system</span>
<span class="nb">install</span><span class="p">(</span><span class="s">FILES</span> <span class="s">tcpserverui.rc</span> <span class="s">DESTINATION</span> <span class="o">${</span><span class="nv">DATA_INSTALL_DIR</span><span class="o">}</span><span class="s">/ktexteditor-tcpserver</span><span class="p">)</span>
<span class="nb">install</span><span class="p">(</span><span class="s">FILES</span> <span class="s">ktexteditor-tcpserver.desktop</span> <span class="s">DESTINATION</span> <span class="o">${</span><span class="nv">SERVICES_INSTALL_DIR</span><span class="o">}</span><span class="p">)</span>
</pre></div>
<p>Notice how the library name we entered (<cite>ktexteditor-tcpserver</cite>) is being used here. Also, you can
see how the User Interface file (tcpserverui.rc) and the Desktop
Configuration File are being copied to the file system. (In practice,
they end up in /usr/share/apps/&lt;folder-name&gt;/ and /usr/share/kde4/services/
respectively).</p>
<p>Now for the actual code! I'll start by explaining the header file,
since it holds the class definitions. I'll ignore all the includes,
and jump directly to the classes.</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">TCPServerPlugin</span>
  <span class="o">:</span> <span class="k">public</span> <span class="n">KTextEditor</span><span class="o">::</span><span class="n">Plugin</span>
<span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>

        <span class="k">explicit</span> <span class="n">TCPServerPlugin</span><span class="p">(</span><span class="n">QObject</span> <span class="o">*</span><span class="n">parent</span><span class="p">,</span>
                                 <span class="k">const</span> <span class="n">QVariantList</span> <span class="o">&amp;</span><span class="n">args</span><span class="p">);</span>

        <span class="k">virtual</span> <span class="o">~</span><span class="n">TCPServerPlugin</span><span class="p">();</span>
        <span class="kt">void</span> <span class="nf">addView</span> <span class="p">(</span><span class="n">KTextEditor</span><span class="o">::</span><span class="n">View</span> <span class="o">*</span><span class="n">view</span><span class="p">);</span>
        <span class="kt">void</span> <span class="nf">removeView</span> <span class="p">(</span><span class="n">KTextEditor</span><span class="o">::</span><span class="n">View</span> <span class="o">*</span><span class="n">view</span><span class="p">);</span>

        <span class="kt">void</span> <span class="nf">readConfig</span><span class="p">();</span>
        <span class="kt">void</span> <span class="nf">writeConfig</span><span class="p">();</span>

    <span class="k">private</span><span class="o">:</span>
        <span class="n">QList</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">TCPServerPluginView</span><span class="o">*&gt;</span> <span class="n">m_views</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
<p>Pretty standard things here. Our main plugin class inherits from the
<cite>KTextEditor::Plugin</cite> class. It overrides the <cite>addView()</cite> and <cite>removeView()</cite>
methods. Since our plugin has no configurable options, we ignore the
other two methods (for now).</p>
<p>Let's look at the TCPServerPluginView class, which is a bit more interesting ;-)</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">TCPServerPluginView</span>
    <span class="o">:</span> <span class="k">public</span> <span class="n">QObject</span><span class="p">,</span> <span class="k">public</span> <span class="n">KXMLGUIClient</span>
<span class="p">{</span>
    <span class="n">Q_OBJECT</span>

    <span class="k">public</span><span class="o">:</span>
        <span class="k">explicit</span> <span class="n">TCPServerPluginView</span><span class="p">(</span><span class="n">KTextEditor</span><span class="o">::</span><span class="n">View</span><span class="o">*</span> <span class="n">view</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
        <span class="o">~</span><span class="n">TCPServerPluginView</span><span class="p">();</span>

    <span class="k">private</span> <span class="nl">Q_SLOTS</span><span class="p">:</span>
        <span class="kt">void</span> <span class="n">slotInsertText</span><span class="p">();</span>
        <span class="kt">void</span> <span class="nf">slotHandleConnection</span><span class="p">();</span>
        <span class="kt">void</span> <span class="nf">slotGetData</span><span class="p">();</span>
        <span class="kt">void</span> <span class="nf">slotDisconnected</span><span class="p">();</span>

    <span class="k">private</span><span class="o">:</span>
        <span class="n">KTextEditor</span><span class="o">::</span><span class="n">View</span> <span class="o">*</span><span class="n">m_view</span><span class="p">;</span>
        <span class="n">QTcpServer</span> <span class="o">*</span><span class="n">srv</span><span class="p">;</span>
        <span class="n">QTcpSocket</span> <span class="o">*</span><span class="n">clientSocket</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
<p>Here, we have four 'Slots'. Slot is basically a Qt concept, and is an
alternative to callbacks. The concept is simple, you can emit 'Signals'
from a Class. Each signal may be connected to one or more Slots.
Whenever a Signal is emitted, the slot is called, which is why ideally,
slots shouldn't use any special types. You can read more about this <a class="reference external" href="http://doc.qt.io/qt-4.8/signalsandslots.html">here</a>.
We also have a QTcpServer and a QTcpSocket as members of this Class.
We'll understand their use better when we take a look at the tcpserver.cpp
file. Notice that TCPServerPluginView also inherits from KXMLGUIClient.
That is why we can use the tcpserverui.rc file to specify the GUI of our
plugin (which consists of only a new entry in the 'Tools' menu).
The slot* methods are explained next, along with the tcpserver.cpp file.</p>
<p>In the tcpserver.cpp file, there are two macros at the very beginning.
Their functions are well documented in the original tutorial, so I'll
skip those, and the Constructor and Destructor for the TCPServerPlugin
Class. These are the overridden methods:</p>
<div class="highlight"><pre><span class="kt">void</span> <span class="n">TCPServerPlugin</span><span class="o">::</span><span class="n">addView</span><span class="p">(</span><span class="n">KTextEditor</span><span class="o">::</span><span class="n">View</span> <span class="o">*</span><span class="n">view</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">TCPServerPluginView</span> <span class="o">*</span><span class="n">nview</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TCPServerPluginView</span><span class="p">(</span><span class="n">view</span><span class="p">);</span>
    <span class="n">m_views</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">nview</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">TCPServerPlugin</span><span class="o">::</span><span class="n">removeView</span><span class="p">(</span><span class="n">KTextEditor</span><span class="o">::</span><span class="n">View</span> <span class="o">*</span><span class="n">view</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">z</span> <span class="o">&lt;</span> <span class="n">m_views</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">z</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">m_views</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">parentClient</span><span class="p">()</span> <span class="o">==</span> <span class="n">view</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">TCPServerPluginView</span> <span class="o">*</span><span class="n">nview</span> <span class="o">=</span> <span class="n">m_views</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">z</span><span class="p">);</span>
            <span class="n">m_views</span><span class="p">.</span><span class="n">removeAll</span><span class="p">(</span><span class="n">nview</span><span class="p">);</span>
            <span class="k">delete</span> <span class="n">nview</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
<p>The addView() method basically adds a new TCPServerPluginView object
to our TCPServerPlugin. Now, each TCPServerPluginView has a m_view member,
which is a KTextEditor::View. The 'View' provides the graphical representation
of a KTextEditor::Document, as said in the API Reference Each plugin may
have many views. For us, since the QTcpServer object is a member of the
TCPServerPluginView, we can have only one TCPServerPluginView, otherwise
the multiple TCPServerPluginView will all try to listen on the same port
(which is hardcoded for now) and cause a crash. Next is the TCPServerPluginView
constructor:</p>
<div class="highlight"><pre><span class="n">TCPServerPluginView</span><span class="o">::</span><span class="n">TCPServerPluginView</span><span class="p">(</span><span class="n">KTextEditor</span><span class="o">::</span><span class="n">View</span> <span class="o">*</span><span class="n">view</span><span class="p">)</span>
    <span class="o">:</span> <span class="n">QObject</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
    <span class="p">,</span> <span class="n">KXMLGUIClient</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
    <span class="p">,</span> <span class="n">m_view</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">setComponentData</span><span class="p">(</span><span class="n">TCPServerPluginFactory</span><span class="o">::</span><span class="n">componentData</span><span class="p">());</span>

    <span class="n">KAction</span> <span class="o">*</span><span class="n">action</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KAction</span><span class="p">(</span><span class="n">i18n</span><span class="p">(</span><span class="s">&quot;Insert thing from TCP Socket&quot;</span><span class="p">),</span> <span class="k">this</span><span class="p">);</span>
    <span class="n">actionCollection</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addAction</span><span class="p">(</span><span class="s">&quot;tools_insert_chars&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">);</span>
    <span class="n">action</span><span class="o">-&gt;</span><span class="n">setShortcut</span><span class="p">(</span><span class="n">Qt</span><span class="o">::</span><span class="n">CTRL</span> <span class="o">+</span> <span class="n">Qt</span><span class="o">::</span><span class="n">Key_M</span><span class="p">);</span>
    <span class="n">connect</span><span class="p">(</span><span class="n">action</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">triggered</span><span class="p">()),</span> <span class="k">this</span><span class="p">,</span> <span class="n">SLOT</span><span class="p">(</span><span class="n">slotInsertText</span><span class="p">()));</span>
    <span class="n">srv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QTcpServer</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="n">srv</span><span class="o">-&gt;</span><span class="n">listen</span><span class="p">(</span><span class="n">QHostAddress</span><span class="o">::</span><span class="n">Any</span><span class="p">,</span> <span class="mi">3000</span><span class="p">);</span>
    <span class="n">connect</span><span class="p">(</span><span class="n">srv</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">newConnection</span><span class="p">()),</span> <span class="k">this</span><span class="p">,</span> <span class="n">SLOT</span><span class="p">(</span><span class="n">slotHandleConnection</span><span class="p">()));</span>
    <span class="n">QList</span><span class="o">&lt;</span><span class="n">QHostAddress</span><span class="o">&gt;</span> <span class="n">ipAddressesList</span> <span class="o">=</span> <span class="n">QNetworkInterface</span><span class="o">::</span><span class="n">allAddresses</span><span class="p">();</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">ipAddressesList</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">kDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">ipAddressesList</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">toString</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">setXMLFile</span><span class="p">(</span><span class="s">&quot;tcpserverui.rc&quot;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
<p>Here, we have first initialized our server, and by calling the listen() method,
we are listening on port 3000 (which is the second argument to the method).
The first argument, QHostAddress::Any tells our QTcpServer to listen on all
interfaces. The next call to connect() the the heart of our plugin. This call
connects the Signal newConnection() (emitted by the srv object) to the
slotHandleConnection() method (or 'Slot') of TCPServerPluginView. So whenever
a client connects to the server, slotHandleConnection() is called. I'm just
going to skip the slotInsertText() method, because all it does is insert
&quot;Awesome Server&quot; into the current document at the cursor position. With that,
we come to the slotHandleConnection() method:</p>
<div class="highlight"><pre><span class="kt">void</span> <span class="n">TCPServerPluginView</span><span class="o">::</span><span class="n">slotHandleConnection</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">clientSocket</span> <span class="o">=</span> <span class="n">srv</span><span class="o">-&gt;</span><span class="n">nextPendingConnection</span><span class="p">();</span>
    <span class="n">connect</span><span class="p">(</span><span class="n">clientSocket</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">readyRead</span><span class="p">()),</span> <span class="k">this</span><span class="p">,</span> <span class="n">SLOT</span><span class="p">(</span><span class="n">slotGetData</span><span class="p">()));</span>
    <span class="n">connect</span><span class="p">(</span><span class="n">clientSocket</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">disconnected</span><span class="p">()),</span> <span class="n">clientSocket</span><span class="p">,</span> <span class="n">SLOT</span><span class="p">(</span><span class="n">deleteLater</span><span class="p">()));</span>
    <span class="n">connect</span><span class="p">(</span><span class="n">clientSocket</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">disconnected</span><span class="p">()),</span> <span class="k">this</span><span class="p">,</span> <span class="n">SLOT</span><span class="p">(</span><span class="n">slotDisconnected</span><span class="p">()));</span>
<span class="p">}</span>
</pre></div>
<p>In this method, we accept the incoming connection which caused
slotHandleConnection() to be called. We also make a few more connections,
so that whenever there's data at the socket which has not been read yet, the
slotGetData() method's called. Also, on disconnect, we need to clear up the
memory allocated to our clientSocket. The slotDisconnected() method is for
debugging only, all it does is print a debug message.</p>
<div class="highlight"><pre><span class="kt">void</span> <span class="n">TCPServerPluginView</span><span class="o">::</span><span class="n">slotGetData</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">QByteArray</span> <span class="n">data</span><span class="p">;</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">clientSocket</span><span class="o">-&gt;</span><span class="n">readAll</span><span class="p">();</span>
    <span class="n">kDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">data</span><span class="p">;</span>
    <span class="n">m_view</span><span class="o">-&gt;</span><span class="n">document</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">insertText</span><span class="p">(</span><span class="n">m_view</span><span class="o">-&gt;</span><span class="n">cursorPosition</span><span class="p">(),</span> <span class="n">QString</span><span class="p">(</span><span class="n">data</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">TCPServerPluginView</span><span class="o">::</span><span class="n">slotDisconnected</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">kDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Socket Disconnected, ready for new connection&quot;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>The slotGetData() method accepts the data from the socket, and reads it into
a QByteArray. This data is then inserted into our document, by calling it's
insertText() method. Also, the cursor position, which is handled by
KTextEditor::View object m_view is passed as the first argument, to specify
where the text is to be inserted. Now let's have a look at the final piece of
the puzzle, tcpserverui.rc:</p>
<div class="highlight"><pre><span class="c">&lt;!-- tcpserverui.rc --&gt;</span>
<span class="cp">&lt;!DOCTYPE kpartgui&gt;</span>
<span class="nt">&lt;kpartplugin</span> <span class="na">name=</span><span class="s">&quot;ktexteditor-tcpserver&quot;</span> <span class="na">library=</span><span class="s">&quot;ktexteditor-tcpserver&quot;</span> <span class="na">version=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;MenuBar&gt;</span>
 <span class="nt">&lt;Menu</span> <span class="na">name=</span><span class="s">&quot;tools&quot;</span><span class="nt">&gt;&lt;Text&gt;</span><span class="err">&amp;</span>Tools<span class="nt">&lt;/Text&gt;</span>
    <span class="nt">&lt;separator</span> <span class="na">group=</span><span class="s">&quot;tools_operations&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Action</span> <span class="na">name=</span><span class="s">&quot;tools_insert_chars&quot;</span> <span class="na">group=</span><span class="s">&quot;tools_operations&quot;</span><span class="nt">/&gt;</span>
 <span class="nt">&lt;/Menu&gt;</span>
<span class="nt">&lt;/MenuBar&gt;</span>
<span class="nt">&lt;/kpartplugin&gt;</span>
</pre></div>
<p>Here we define a GUI to our plugin. Since the main Kate environment is also
specified by KXMLGUIWindow, or KXMLGUIClient classes, this file will allow the
GUI for our plugin to be 'inserted' into the Kate GUI. Also, we have an action
defined here, tools_insert_chars. If you remember, this action was used in the
constructor for our TCPServerPluginView class, and it was assigned the shortcut
Ctrl+M. This action triggers our slotInsertText() method, which causes &quot;Awesome
Server&quot; to be inserted into the current document.</p>
<p>That's about all there is to this plugin... You can find the whole code
<a class="reference external" href="https://github.com/czardoz/ktexteditor-tcpserver-plugin">on GitHub</a>.
I will try to write another part to this, where we're allowed to configure the
port where we want to listen (currently it is hardcoded to 3000).</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Beeswarm]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/beeswarm.html"/>
        <published>2013-03-02T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/beeswarm.html</id>
        <category scheme="http://aniketpanse.in/tag/#linux" term="linux" label="linux" />
        <category scheme="http://aniketpanse.in/tag/#honeypots" term="honeypots" label="honeypots" />
        <category scheme="http://aniketpanse.in/tag/#networking" term="networking" label="networking" />
        <category scheme="http://aniketpanse.in/tag/#security" term="security" label="security" />
        <category scheme="http://aniketpanse.in/tag/#beeswarm" term="beeswarm" label="beeswarm" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>So I was looking for some good python projects to contribute to the other day,
and I came across <a class="reference external" href="https://github.com/honeynet/beeswarm/">Beeswarm</a>, which
is another awesome project from HoneyNet. It basically consists of a honeypot,
the 'Hive', and automated 'Feeders' which simulate end users. i.e: They generate
traffic typically generated by active end users, such as uploading files, deleting
them on FTP, or running SSH sessions. The Hive part is completely implemented,
and Feeders are under active development.</p>
<p>At first I wondered what it'll be used for, and then I saw
<a class="reference external" href="http://map.honeynet.org/">HoneyMap</a>, which not
only is insanely cool but is also used to gather high quality data for research.
The best part about this project is that it's relatively new, so there's a lot
I can help out with. I made my first contribution by fixing 3 small bugs. I
now want to work on fixing issue #8, upgrading pyFTPdlib to the latest version.
Let's see how that comes about! :)</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[More Kate]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/more-kate.html"/>
        <published>2013-03-02T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/more-kate.html</id>
        <category scheme="http://aniketpanse.in/tag/#linux" term="linux" label="linux" />
        <category scheme="http://aniketpanse.in/tag/#kde" term="kde" label="kde" />
        <category scheme="http://aniketpanse.in/tag/#Qt" term="Qt" label="Qt" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>As I said before, I'm currently playing around with Kate. I must
say I've learnt a lot in this week. I was able to compile my own
little plugin, wrote it from scratch (referring to the helloworld
code of course!). It doesn't do anything interesting right now,
but I plan to make it do something cool.</p>
<p>The idea is to listen on a TCP socket and insert whatever data I
receive on that socket. I have no idea right now where this code
should go. I can make a standalone server easily, but integrating
that into the callback based model of a GUI system might be pretty
tough. I am also reading up on C++, and plan to start with Telepathy
next week. I should probably also mention what exactly I am doing
when I debug Kate: (from within the build directory)</p>
<div class="highlight"><pre><span class="gp">$</span> make
<span class="gp">$</span> make install
<span class="gp">$</span> ../run.sh kate 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> grep &lt;my-debug-prefix&gt;
</pre></div>
<p>The '2&gt;&amp;1' part means that the stderr is redirected to stdout.
That's how I can grep :) I assumed that I won't have to run CMake
everytime. Also, it's becoming really tedious, using vim and shell
all the time. I will have another go at setting up the whole thing
with QtCreator, I might even get to learn something in the process!</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[My Experiments with Kate]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/experiments-with-kate.html"/>
        <published>2013-02-26T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/experiments-with-kate.html</id>
        <category scheme="http://aniketpanse.in/tag/#linux" term="linux" label="linux" />
        <category scheme="http://aniketpanse.in/tag/#kde" term="kde" label="kde" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>Alright, so Kate (KDE Advanced Text Editor) is my new obsession.
I basically tried to get involved by fixing a 'Junior Job', but
in the end it turned out to be an external issue. So, I turned
to the plugins. There's a pretty nice how-to on the KDE Techbase,
but it's a bit old.</p>
<p>Now, C++ is not my language of choice, I must say. Give me Python
any day. Anyway, since I'm not very familiar with it, I thought
maybe I should use some IDE. Then followed 6 hours of trying to get
CMake working with Eclipse (I also messed up my Android ADT install
during this time, but that's another story!). So I turned to
QtCreator. Again, there's a lucid how-to on the Kate website, but it
fails to mention that running Kate from within QtCreator does not run
'kbuildsycoca4'. After that, I am currently stuck at getting my own
plugin to work (which is pretty much a copy of the hello world plugin).
I've also been getting a load of help on the IRC (thanks igli!).
Hopefully my plugin will be working by tomorrow. I should read CMake
documentation too.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[/dev/random Device]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/dev-random.html"/>
        <published>2013-02-16T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/dev-random.html</id>
        <category scheme="http://aniketpanse.in/tag/#linux" term="linux" label="linux" />
        <category scheme="http://aniketpanse.in/tag/#random-number-generator" term="random-number-generator" label="random-number-generator" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>I read about the 'devrandom' device in linux today. It's a random number
generator which uses environmental noise to generate the random numbers.
That's pretty cool, because that makes it as close to a true random number
generator as possible. It also uses our mouse movements and stuff to feed
the 'entropy pool' as it's called.</p>
<p>The only drawback of this device is that it 'blocks' when the entropy pool
is empty. That means, if any program is using /dev/random and the entropy
pool becomes empty, the program must wait for it to be refilled again.
Now, that's pretty unacceptable in some cases. Which is why we have the
/dev/urandom device. It is basically an unlocked device (means it won't
block). It reuses the existing entropy pool to generate more pseudo-random
bits. Yep, that means it's not truly random.</p>
<p>If you want to generate cryptographic keys, maybe /dev/urandom is not the
way to go. If you really want true unblocked random numbers, you should read
this article. It mentions a way of using white noise from your soundcard
to ensure that the entropy pool doesn't get depleted. Use the audio entropy
daemon or video entropy daemon to collect entropy from sound or video data.
Just as an interesting aside, FreeBSD doesn't implement the devrandom device
in this way. It uses a different implementation, which allows /dev/random
to be non-blocking by itself.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Hello World]]></title>
        <author><name>Aniket</name></author>
        <link href="http://aniketpanse.in/2013/hello-world.html"/>
        <published>2013-02-15T00:00:00+08:00</published>
        <updated>2015-10-03T14:50:39+08:00</updated>
        <id>http://aniketpanse.in/2013/hello-world.html</id>
        <category scheme="http://aniketpanse.in/tag/#blog" term="blog" label="blog" />
        <category scheme="http://aniketpanse.in/tag/#web" term="web" label="web" />
        <content type="html" xml:base="http://aniketpanse.in/" xml:lang="en">
            <![CDATA[ <p>For want of something to do during the holidays, I decided to start this blog.
This is just the mandatory 'Hello World' post. Much more is yet to come.
I won't stick to any one subject with this blog. Any and everything on my mind
will be posted here! I'll also try to be much less narcissistic here, than on
my website ;-) I don't want to make this an actual blog, with long essays and
posts. I'll use it as a mini-blog. Plus it's much easier to write stuff here, I
really don't want to install Wordpress or some other heavy framework.</p>
<p><em>Update</em>
This post was written back when I had a separate blog and a website. I now only
have a blog.</p>
]]>
        </content>
    </entry>
</feed>